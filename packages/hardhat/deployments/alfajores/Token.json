{
  "address": "0xD7575d1502013919660DB9995ab1B03ABE19BC00",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UNIT_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ce1764c08d8b88169067488a6b84b51d303464e4cd0dfc80179f002c132fb11",
  "receipt": {
    "to": null,
    "from": "0x0512AEafCA1571AE2B130de8df8f38aC5abF09aE",
    "contractAddress": "0xD7575d1502013919660DB9995ab1B03ABE19BC00",
    "transactionIndex": 0,
    "gasUsed": "1145923",
    "logsBloom": "0x
    "blockHash": "0x065e482e8fd1dd000a41af8939fcb64bf9f9c540fbaba3c6f2a1d2aa30712cdc",
    "transactionHash": "0x3ce1764c08d8b88169067488a6b84b51d303464e4cd0dfc80179f002c132fb11",
    "logs": [],
    "blockNumber": 9796532,
    "cumulativeGasUsed": "1145923",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a88c6316dd8cb707c88ec6b2a7018e70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNIT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Checks the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"returns\":{\"_0\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approves the passed address to spend the specified amount of tokens       on behalf of msg.sender.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A bool indicating success (always returns true)\"}},\"balance()\":{\"details\":\"Gets the balance of the calling address.\",\"returns\":{\"_0\":\"An uint256 representing the amount owned by the calling address\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the balance of\"},\"returns\":{\"_0\":\"An uint256 representing the amount owned by the passed address\"}},\"totalSupply()\":{\"details\":\"Total supply of tokens\"},\"transfer(address,uint256)\":{\"details\":\"Transfers token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"},\"returns\":{\"_0\":\"A bool indicating if the transfer was successful.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers tokens from one address to another\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"},\"returns\":{\"_0\":\"A bool indicating if the transfer was successful.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Token.sol\":\"Token\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract Token\\n///+interfaces\\n{\\n    // Allow SafeMath functions to be called for all uint256 types\\n    using SafeMath for uint256; \\n\\n\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ S T A T E @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n\\n    // Account used to deploy contract\\n    address private contractOwner;         \\n\\n/*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ASSET VALUE TRACKING: TOKEN  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/\\n\\n    string public name;\\n    string public symbol;\\n    uint256 public decimals;\\n    \\n    // Token balance for each address\\n    mapping(address => uint256) balances;              \\n\\n    // Approval granted to transfer tokens by one address to another address                 \\n    mapping (address => mapping (address => uint256)) internal allowed; \\n\\n    // Tokens currently in circulation (you'll need to update this if you create more tokens)\\n    uint256 public total;                  \\n\\n    // Tokens created when contract was deployed                             \\n    uint256 public initialSupply;         \\n\\n    // Multiplier to convert to smallest unit                              \\n    uint256 public UNIT_MULTIPLIER;                                     \\n\\n\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ C O N S T R U C T O R @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n\\n    constructor()  \\n    {\\n        contractOwner = msg.sender;       \\n\\n/*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ASSET VALUE TRACKING: TOKEN  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/\\n\\n        name = \\\"Token\\\";             \\n        symbol = \\\"TKN\\\";           \\n        decimals = 18;     \\n\\n        // // Multiplier to convert to smallest unit\\n        UNIT_MULTIPLIER = 10 ** uint256(decimals); \\n\\n        uint256 supply = 1000;       \\n        total = supply.mul(UNIT_MULTIPLIER);\\n        initialSupply = total;\\n\\n        // // Assign entire initial supply to contract owner\\n        balances[contractOwner] = total;    \\n\\n    }\\n\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ E V E N T S @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n\\n\\n/*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ASSET VALUE TRACKING: TOKEN  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/\\n\\n    // Fired when an account authorizes another account to spend tokens on its behalf\\n\\n    event Approval          \\n                            (\\n                                address indexed owner, \\n                                address indexed spender, \\n                                uint256 value\\n                            );\\n\\n    // Fired when tokens are transferred from one account to another\\n    event Transfer          \\n                            (\\n                                address indexed from, \\n                                address indexed to, \\n                                uint256 value\\n                            );\\n\\n\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ M O D I F I E R S @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n\\n///+modifiers\\n\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ F U N C T I O N S @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n\\n\\n/*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ASSET VALUE TRACKING: TOKEN  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/\\n    /**\\n    * @dev Total supply of tokens\\n    */\\n    function totalSupply() \\n                            external \\n                            view \\n                            returns (uint256) \\n    {\\n        return total;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the calling address.\\n    *\\n    * @return An uint256 representing the amount owned by the calling address\\n    */\\n    function balance()\\n                            public \\n                            view \\n                            returns (uint256) \\n    {\\n        return balanceOf(msg.sender);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    *\\n    * @param owner The address to query the balance of\\n    * @return An uint256 representing the amount owned by the passed address\\n    */\\n    function balanceOf\\n                            (\\n                                address owner\\n                            ) \\n                            public \\n                            view \\n                            returns (uint256) \\n    {\\n        return balances[owner];\\n    }\\n\\n    /**\\n    * @dev Transfers token for a specified address\\n    *\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    * @return A bool indicating if the transfer was successful.\\n    */\\n    function transfer\\n                            (\\n                                address to, \\n                                uint256 value\\n                            ) \\n                            public \\n                            returns (bool) \\n    {\\n        require(to != address(0));\\n        require(to != msg.sender);\\n        require(value <= balanceOf(msg.sender));                                         \\n\\n        balances[msg.sender] = balances[msg.sender].sub(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfers tokens from one address to another\\n    *\\n    * @param from address The address which you want to send tokens from\\n    * @param to address The address which you want to transfer to\\n    * @param value uint256 the amount of tokens to be transferred\\n    * @return A bool indicating if the transfer was successful.\\n    */\\n    function transferFrom\\n                            (\\n                                address from, \\n                                address to, \\n                                uint256 value\\n                            ) \\n                            public \\n                            returns (bool) \\n    {\\n        require(from != address(0));\\n        require(value <= allowed[from][msg.sender]);\\n        require(value <= balanceOf(from));                                         \\n        require(to != address(0));\\n        require(from != to);\\n\\n        balances[from] = balances[from].sub(value);\\n        balances[to] = balances[to].add(value);\\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\\n        emit Transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Checks the amount of tokens that an owner allowed to a spender.\\n    *\\n    * @param owner address The address which owns the funds.\\n    * @param spender address The address which will spend the funds.\\n    * @return A uint256 specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance\\n                            (\\n                                address owner, \\n                                address spender\\n                            ) \\n                            public \\n                            view \\n                            returns (uint256) \\n    {\\n        return allowed[owner][spender];\\n    }\\n\\n    /**\\n    * @dev Approves the passed address to spend the specified amount of tokens \\n    *      on behalf of msg.sender.\\n    *\\n    * @param spender The address which will spend the funds.\\n    * @param value The amount of tokens to be spent.\\n    * @return A bool indicating success (always returns true)\\n    */\\n    function approve\\n                            (\\n                                address spender, \\n                                uint256 value\\n                            ) \\n                            public \\n                            returns (bool) \\n    {\\n        allowed[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n    \\n}   \",\"keccak256\":\"0xe9df38b5ec6654dc8d22925eb9913271df9f7aed892abba179a8cbe5e3d3700c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600581526020017f546f6b656e000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620001c5565b506040518060400160405280600381526020017f544b4e000000000000000000000000000000000000000000000000000000000081525060029080519060200190620000ed929190620001c5565b506012600381905550600354600a620001079190620002d0565b60088190555060006103e890506200013060085482620001ad60201b62000bdb1790919060201c565b600681905550600654600781905550600654600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505062000519565b60008183620001bd91906200040d565b905092915050565b828054620001d39062000478565b90600052602060002090601f016020900481019282620001f7576000855562000243565b82601f106200021257805160ff191683800117855562000243565b8280016001018555821562000243579182015b828111156200024257825182559160200191906001019062000225565b5b50905062000252919062000256565b5090565b5b808211156200027157600081600090555060010162000257565b5090565b6000808291508390505b6001851115620002c7578086048111156200029f576200029e620004ae565b5b6001851615620002af5780820291505b8081029050620002bf856200050c565b94506200027f565b94509492505050565b6000620002dd826200046e565b9150620002ea836200046e565b9250620003197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000321565b905092915050565b60008262000333576001905062000406565b8162000343576000905062000406565b81600181146200035c576002811462000367576200039d565b600191505062000406565b60ff8411156200037c576200037b620004ae565b5b8360020a915084821115620003965762000395620004ae565b5b5062000406565b5060208310610133831016604e8410600b8410161715620003d75782820a905083811115620003d157620003d0620004ae565b5b62000406565b620003e6848484600162000275565b925090508184048111156200040057620003ff620004ae565b5b81810290505b9392505050565b60006200041a826200046e565b915062000427836200046e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620004635762000462620004ae565b5b828202905092915050565b6000819050919050565b600060028204905060018216806200049157607f821691505b60208210811415620004a857620004a7620004dd565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60008160011c9050919050565b61106680620005296000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063378dc3dc1161008c578063a9059cbb11610066578063a9059cbb14610218578063b69ef8a814610248578063dd62ed3e14610266578063fc540cd314610296576100cf565b8063378dc3dc146101ac57806370a08231146101ca57806395d89b41146101fa576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd146101405780632ddbd13a14610170578063313ce5671461018e575b600080fd5b6100dc6102b4565b6040516100e99190610da9565b60405180910390f35b61010c60048036038101906101079190610cfb565b610342565b6040516101199190610d8e565b60405180910390f35b61012a610434565b6040516101379190610dcb565b60405180910390f35b61015a60048036038101906101559190610cac565b61043e565b6040516101679190610d8e565b60405180910390f35b610178610833565b6040516101859190610dcb565b60405180910390f35b610196610839565b6040516101a39190610dcb565b60405180910390f35b6101b461083f565b6040516101c19190610dcb565b60405180910390f35b6101e460048036038101906101df9190610c47565b610845565b6040516101f19190610dcb565b60405180910390f35b61020261088e565b60405161020f9190610da9565b60405180910390f35b610232600480360381019061022d9190610cfb565b61091c565b60405161023f9190610d8e565b60405180910390f35b610250610b3e565b60405161025d9190610dcb565b60405180910390f35b610280600480360381019061027b9190610c70565b610b4e565b60405161028d9190610dcb565b60405180910390f35b61029e610bd5565b6040516102ab9190610dcb565b60405180910390f35b600180546102c190610f61565b80601f01602080910402602001604051908101604052809291908181526020018280546102ed90610f61565b801561033a5780601f1061030f5761010080835404028352916020019161033a565b820191906000526020600020905b81548152906001019060200180831161031d57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104229190610dcb565b60405180910390a36001905092915050565b6000600654905090565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561047957600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561050257600080fd5b61050b84610845565b82111561051757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561055157600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561058a57600080fd5b6105dc82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf190919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061067182600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061074382600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf190919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108209190610dcb565b60405180910390a3600190509392505050565b60065481565b60035481565b60075481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6002805461089b90610f61565b80601f01602080910402602001604051908101604052809291908181526020018280546108c790610f61565b80156109145780601f106108e957610100808354040283529160200191610914565b820191906000526020600020905b8154815290600101906020018083116108f757829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561095757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561099057600080fd5b61099933610845565b8211156109a557600080fd5b6109f782600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf190919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a8c82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b2c9190610dcb565b60405180910390a36001905092915050565b6000610b4933610845565b905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60085481565b60008183610be99190610e58565b905092915050565b60008183610bff9190610eb2565b905092915050565b60008183610c159190610e02565b905092915050565b600081359050610c2c81611002565b92915050565b600081359050610c4181611019565b92915050565b600060208284031215610c5957600080fd5b6000610c6784828501610c1d565b91505092915050565b60008060408385031215610c8357600080fd5b6000610c9185828601610c1d565b9250506020610ca285828601610c1d565b9150509250929050565b600080600060608486031215610cc157600080fd5b6000610ccf86828701610c1d565b9350506020610ce086828701610c1d565b9250506040610cf186828701610c32565b9150509250925092565b60008060408385031215610d0e57600080fd5b6000610d1c85828601610c1d565b9250506020610d2d85828601610c32565b9150509250929050565b610d4081610ef8565b82525050565b6000610d5182610de6565b610d5b8185610df1565b9350610d6b818560208601610f2e565b610d7481610ff1565b840191505092915050565b610d8881610f24565b82525050565b6000602082019050610da36000830184610d37565b92915050565b60006020820190508181036000830152610dc38184610d46565b905092915050565b6000602082019050610de06000830184610d7f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610e0d82610f24565b9150610e1883610f24565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4d57610e4c610f93565b5b828201905092915050565b6000610e6382610f24565b9150610e6e83610f24565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ea757610ea6610f93565b5b828202905092915050565b6000610ebd82610f24565b9150610ec883610f24565b925082821015610edb57610eda610f93565b5b828203905092915050565b6000610ef182610f04565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610f4c578082015181840152602081019050610f31565b83811115610f5b576000848401525b50505050565b60006002820490506001821680610f7957607f821691505b60208210811415610f8d57610f8c610fc2565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61100b81610ee6565b811461101657600080fd5b50565b61102281610f24565b811461102d57600080fd5b5056fea2646970667358221220ca23454fb5661073f8932f475191b9b52b39dc843b59313db9682db34a43b38064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063378dc3dc1161008c578063a9059cbb11610066578063a9059cbb14610218578063b69ef8a814610248578063dd62ed3e14610266578063fc540cd314610296576100cf565b8063378dc3dc146101ac57806370a08231146101ca57806395d89b41146101fa576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd146101405780632ddbd13a14610170578063313ce5671461018e575b600080fd5b6100dc6102b4565b6040516100e99190610da9565b60405180910390f35b61010c60048036038101906101079190610cfb565b610342565b6040516101199190610d8e565b60405180910390f35b61012a610434565b6040516101379190610dcb565b60405180910390f35b61015a60048036038101906101559190610cac565b61043e565b6040516101679190610d8e565b60405180910390f35b610178610833565b6040516101859190610dcb565b60405180910390f35b610196610839565b6040516101a39190610dcb565b60405180910390f35b6101b461083f565b6040516101c19190610dcb565b60405180910390f35b6101e460048036038101906101df9190610c47565b610845565b6040516101f19190610dcb565b60405180910390f35b61020261088e565b60405161020f9190610da9565b60405180910390f35b610232600480360381019061022d9190610cfb565b61091c565b60405161023f9190610d8e565b60405180910390f35b610250610b3e565b60405161025d9190610dcb565b60405180910390f35b610280600480360381019061027b9190610c70565b610b4e565b60405161028d9190610dcb565b60405180910390f35b61029e610bd5565b6040516102ab9190610dcb565b60405180910390f35b600180546102c190610f61565b80601f01602080910402602001604051908101604052809291908181526020018280546102ed90610f61565b801561033a5780601f1061030f5761010080835404028352916020019161033a565b820191906000526020600020905b81548152906001019060200180831161031d57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104229190610dcb565b60405180910390a36001905092915050565b6000600654905090565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561047957600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561050257600080fd5b61050b84610845565b82111561051757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561055157600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561058a57600080fd5b6105dc82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf190919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061067182600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061074382600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf190919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108209190610dcb565b60405180910390a3600190509392505050565b60065481565b60035481565b60075481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6002805461089b90610f61565b80601f01602080910402602001604051908101604052809291908181526020018280546108c790610f61565b80156109145780601f106108e957610100808354040283529160200191610914565b820191906000526020600020905b8154815290600101906020018083116108f757829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561095757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561099057600080fd5b61099933610845565b8211156109a557600080fd5b6109f782600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf190919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a8c82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b2c9190610dcb565b60405180910390a36001905092915050565b6000610b4933610845565b905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60085481565b60008183610be99190610e58565b905092915050565b60008183610bff9190610eb2565b905092915050565b60008183610c159190610e02565b905092915050565b600081359050610c2c81611002565b92915050565b600081359050610c4181611019565b92915050565b600060208284031215610c5957600080fd5b6000610c6784828501610c1d565b91505092915050565b60008060408385031215610c8357600080fd5b6000610c9185828601610c1d565b9250506020610ca285828601610c1d565b9150509250929050565b600080600060608486031215610cc157600080fd5b6000610ccf86828701610c1d565b9350506020610ce086828701610c1d565b9250506040610cf186828701610c32565b9150509250925092565b60008060408385031215610d0e57600080fd5b6000610d1c85828601610c1d565b9250506020610d2d85828601610c32565b9150509250929050565b610d4081610ef8565b82525050565b6000610d5182610de6565b610d5b8185610df1565b9350610d6b818560208601610f2e565b610d7481610ff1565b840191505092915050565b610d8881610f24565b82525050565b6000602082019050610da36000830184610d37565b92915050565b60006020820190508181036000830152610dc38184610d46565b905092915050565b6000602082019050610de06000830184610d7f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610e0d82610f24565b9150610e1883610f24565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4d57610e4c610f93565b5b828201905092915050565b6000610e6382610f24565b9150610e6e83610f24565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ea757610ea6610f93565b5b828202905092915050565b6000610ebd82610f24565b9150610ec883610f24565b925082821015610edb57610eda610f93565b5b828203905092915050565b6000610ef182610f04565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610f4c578082015181840152602081019050610f31565b83811115610f5b576000848401525b50505050565b60006002820490506001821680610f7957607f821691505b60208210811415610f8d57610f8c610fc2565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61100b81610ee6565b811461101657600080fd5b50565b61102281610f24565b811461102d57600080fd5b5056fea2646970667358221220ca23454fb5661073f8932f475191b9b52b39dc843b59313db9682db34a43b38064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Checks the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "returns": {
          "_0": "A uint256 specifying the amount of tokens still available for the spender."
        }
      },
      "approve(address,uint256)": {
        "details": "Approves the passed address to spend the specified amount of tokens       on behalf of msg.sender.",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        },
        "returns": {
          "_0": "A bool indicating success (always returns true)"
        }
      },
      "balance()": {
        "details": "Gets the balance of the calling address.",
        "returns": {
          "_0": "An uint256 representing the amount owned by the calling address"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of"
        },
        "returns": {
          "_0": "An uint256 representing the amount owned by the passed address"
        }
      },
      "totalSupply()": {
        "details": "Total supply of tokens"
      },
      "transfer(address,uint256)": {
        "details": "Transfers token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        },
        "returns": {
          "_0": "A bool indicating if the transfer was successful."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers tokens from one address to another",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        },
        "returns": {
          "_0": "A bool indicating if the transfer was successful."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 320,
        "contract": "contracts/Token.sol:Token",
        "label": "contractOwner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 322,
        "contract": "contracts/Token.sol:Token",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 324,
        "contract": "contracts/Token.sol:Token",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 326,
        "contract": "contracts/Token.sol:Token",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 330,
        "contract": "contracts/Token.sol:Token",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 336,
        "contract": "contracts/Token.sol:Token",
        "label": "allowed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 338,
        "contract": "contracts/Token.sol:Token",
        "label": "total",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/Token.sol:Token",
        "label": "initialSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 342,
        "contract": "contracts/Token.sol:Token",
        "label": "UNIT_MULTIPLIER",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}